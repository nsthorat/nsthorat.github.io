{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"home","text":""},{"location":"#nikhil-thorat","title":"nikhil thorat","text":"<p>     I write software, tinker with music, build aquariums, live in a church, and try not to take myself too seriously.   </p> <p>     Most recently, I co-founded Lilac AI, which is now joining Databricks.   </p> <p>     Before that, I was at Google for 10+ years where I created projects like TensorFlow.js and Know Your Data.   </p>"},{"location":"#work","title":"work","text":"<ul> <li>Lilac AI</li> <li>TensorFlow.js</li> <li>Know Your Data</li> </ul>"},{"location":"#blog","title":"blog","text":"<ul> <li>Lessons of a first time founder</li> </ul>"},{"location":"#music","title":"music","text":"<ul> <li>songs</li> <li>ableton plugins</li> </ul>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#posts","title":"posts","text":"<ul> <li>Coding Agents: Self-Verification Loops</li> <li>Lessons of a first time founder</li> </ul> <p>I just set up my website to publish one blog post. Might write some more when time permits.</p>"},{"location":"blog/coding-agents-self-verification-loops/","title":"Coding Agents: Increase the autonomy slider","text":"<p>July 2025</p> <p>TL;DR: Make Claude verify its own work. Scripts, logs, screenshots. Stop being the QA. I now run 5 Claude instances in parallel instead of babysitting one.</p> <p>If you want to see code, see this project where I built a Databricks App that has a UI with a LangGraph Agent, monitored with MLflow 3.0. This post will focus on Claude Code, but these tricks apply to Cursor, Gemini, and other AI coding tools.</p> <p>In his Software 3.0 talk, Karpathy describes what he calls the \"autonomy slider.\" You can be \"mostly in charge\" with small edits, or slide toward full autonomous operations. This post is about turning that slider up enough that I can actually go make coffee while Claude builds features.</p> <p>My approach: figure out where I'm the bottleneck and automate it away. Every time I find myself checking Claude's work, I ask \"how can Claude check this instead?\" This post shares what I've learned\u2014the good, the bad, and the times Claude deleted my entire database (kidding, but only because I had safeguards).</p> <p>The Naive Way (Human as Bottleneck):</p> <p></p> <p>The Self-Verification Way:</p> <p></p> <p>Let me run with Karpathy's orchestra metaphor. I'm conducting an orchestra where every musician has a 10-minute memory\u2014brilliant players who forget what symphony we're playing between movements. As conductor, I'm constantly reminding them what piece we're playing, what key we're in, where we're headed.</p> <p>I used to write down every single note. Now? I teach them to hear when they're out of tune.</p> <p>Good engineering practices\u2014tests, types, docs\u2014these are the sheet music for my forgetful musicians. A README isn't documentation; it's a memory aid. Types aren't just for catching bugs; they're guardrails that stop Claude from passing a User object to a function expecting a banana.</p> <p>This post is about ear training. Teaching my musicians to know when they're in key, when they're following the progression, and when they're veering into jazz fusion during a Bach concerto.</p>"},{"location":"blog/coding-agents-self-verification-loops/#tuning-instruments-choosing-the-right-stack","title":"Tuning Instruments: Choosing the Right Stack","text":"<p>Before teaching musicians to play, you need the right instruments. Three things matter when choosing tools for AI agents: speed, guardrails, and rich type information. Turns out what helps humans\u2014fast feedback, strong types, clear docs\u2014is exactly what Claude needs.</p> <p>I always use Python type hints and TypeScript. Never plain JavaScript. More type info = less chance Claude does something completely insane.</p> <p>The stack I use for simple Python backend + TypeScript frontend projects:</p>"},{"location":"blog/coding-agents-self-verification-loops/#python-tooling","title":"Python tooling","text":"<ul> <li>uv, for 10-100x faster package management</li> <li>Ruff, for lightning-fast linting and formatting</li> <li>ty, for extremely fast type checking</li> </ul> <p>(I just use whatever Charlie Marsh builds at this point.)</p>"},{"location":"blog/coding-agents-self-verification-loops/#backend-framework","title":"Backend framework","text":"<p>FastAPI. The automatic OpenAPI docs at <code>/docs</code> are clutch\u2014Claude can read them to understand your API without me copy-pasting endpoint definitions.</p>"},{"location":"blog/coding-agents-self-verification-loops/#frontend","title":"Frontend","text":"<ul> <li>Vite, for lightning-fast dev server with hot module replacement</li> <li>Bun, for all-in-one JavaScript tooling</li> <li>React, for component-based UIs agents understand</li> <li>shadcn/ui, for copy-paste components with full code ownership</li> </ul>"},{"location":"blog/coding-agents-self-verification-loops/#python-frontend-bridge","title":"Python \u27f7 Frontend bridge","text":"<p>OpenAPI code generation. FastAPI schemas \u2192 OpenAPI spec \u2192 TypeScript types and client code. Change a Python type? TypeScript updates automatically. No more \"oh I forgot to update the frontend types\" bugs.</p> <p>Here's the thing: all these tools create tight feedback loops. Claude writes code, the tooling immediately screams if something's wrong, Claude fixes it. No waiting for me to notice.</p>"},{"location":"blog/coding-agents-self-verification-loops/#ear-training-self-verification","title":"Ear Training: Self-Verification","text":"<p>Every time I build something now, I ask myself two questions:</p> <ol> <li>What am I building?</li> <li>How will Claude know if it worked?</li> </ol> <p>It's easier for LLMs to verify than to generate. Just like how anyone can hear when a note is off-key, but playing in tune is hard. So I teach Claude to be its own critic.</p> <p>Here are the techniques I use. You don't need all of them\u2014pick what makes sense for your setup.</p>"},{"location":"blog/coding-agents-self-verification-loops/#basic-self-verification","title":"Basic Self-Verification","text":"<p>The basics. Nothing fancy, but these save me from being Claude's babysitter.</p>"},{"location":"blog/coding-agents-self-verification-loops/#scripts","title":"Scripts","text":"<p>Create simple scripts for everything. Here's what I typically have:</p> <p>watch.sh - The most important script. Every time Claude changes code, the server restarts. If something breaks, it shows up in the logs immediately. Claude reads the error, fixes it, tries again. No waiting for me to say \"hey, you broke the imports\": <pre><code>#!/bin/bash\n# Kill existing processes first\npkill -f uvicorn 2&gt;/dev/null\npkill -f vite 2&gt;/dev/null\n\n# Start everything in parallel\nuv run uvicorn server.main:app --reload &amp;\nbun vite --host &amp;\n\n# Auto-regenerate TypeScript client when Python changes\nuv run watchmedo shell-command \\\n  --patterns=\"*.py\" \\\n  --command='uv run python make_openapi.py | npx openapi-typescript-codegen --input stdin --output client/api' \\\n  src/server &amp;\n</code></pre></p> <p>In CLAUDE.md, I tell it to run with: <code>nohup ./watch.sh &gt; watch.log 2&gt;&amp;1 &amp;</code></p> <p>Everything hot reloads. Python changes trigger TypeScript regeneration. If something hangs, Claude can read the logs and restart with <code>pkill</code>.</p> <p>fix.sh - Auto-fixes what it can. Claude runs this, then fixes whatever's left: <pre><code>uv run ruff check . --fix\nbun run prettier --write .\n</code></pre></p>"},{"location":"blog/coding-agents-self-verification-loops/#print-statements","title":"Print Statements","text":"<p>Old school but effective. When something's slow or acting weird, I tell Claude: \"add timing logs to every function in this flow.\" Claude instruments the code, we find the bottleneck, fix it, remove the logs. </p> <p>No fancy profilers. Just: <pre><code>start = time.time()\n# ... code ...\nprint(f\"Processing took {time.time() - start:.2f}s\")\n</code></pre></p> <p>Sometimes the oldest debugging techniques work best.</p>"},{"location":"blog/coding-agents-self-verification-loops/#claude-scratchpad","title":"Claude Scratchpad","text":"<p>I give Claude a <code>claude_scripts/</code> folder (gitignored) for throwaway scripts. Something acting weird? Claude writes a script to figure it out. No more \"let me add some print statements and see what happens\": <pre><code># /// script\n# requires-python = \"&gt;=3.11\"\n# dependencies = [\"requests\", \"pandas\"]\n# ///\n\nimport requests\nimport pandas as pd\n\n# Quick analysis script Claude wrote\nresponse = requests.get(\"http://localhost:8000/metrics\")\ndf = pd.DataFrame(response.json())\nprint(df.describe())\n</code></pre> Without this folder, Claude leaves test scripts everywhere like a messy roommate. UV's inline dependencies mean no virtual env setup\u2014just run the script.</p>"},{"location":"blog/coding-agents-self-verification-loops/#api-self-testing","title":"API Self-Testing","text":"<p>FastAPI gives you <code>/docs</code> for free. I tell Claude to read them and figure out the API itself: <pre><code>## API Endpoints\n- API docs: http://localhost:8000/docs\n- OpenAPI spec: `curl http://localhost:8000/openapi.json`\n\n## Common endpoints\n- Health check: `curl http://localhost:8000/health`\n- Create item: `curl -X POST http://localhost:8000/items -d '{\"name\": \"test\"}'`\n- List items: `curl http://localhost:8000/items`\n</code></pre> Now Claude can test its own endpoints. No more \"I think this works\" moments.</p>"},{"location":"blog/coding-agents-self-verification-loops/#browser-automation-with-playwright","title":"Browser Automation with Playwright","text":"<p>Claude can take screenshots and see what it built. Install the MCP: <pre><code>claude mcp add playwright npx '@playwright/mcp@latest'\n</code></pre> Now Claude can click buttons, take screenshots, verify the UI actually works. Way better than me describing what's broken.</p> <p>(If you want to automatically login with Playwright, I made this repo which will automatically copy cookies before opening Playwright.)</p>"},{"location":"blog/coding-agents-self-verification-loops/#deployment","title":"Deployment","text":"<p>In my Databricks app, I just say \"deploy.\" Claude runs the script, watches the logs, fixes any startup issues. If pip complains about dependencies? Claude fixes it. Port already in use? Claude handles it.</p>"},{"location":"blog/coding-agents-self-verification-loops/#crescendo-the-next-movement","title":"Crescendo: The Next Movement","text":"<p>Once you have the basics down, here's where it gets interesting. These are some examples I thought were cool when in the self-verification loop mindset:</p>"},{"location":"blog/coding-agents-self-verification-loops/#automated-purchasing-of-bandcamp-songs","title":"Automated Purchasing of Bandcamp Songs","text":"<p>I wanted to buy songs from Bandcamp automatically.</p> <p>What makes this interesting: Claude slowly builds itself a deterministic scraper. It uses LLMs to figure out each step, but the final script has zero AI\u2014just pure automation that works every time.</p> <p>(This is part of another project I'm working on that I'll release at some point!)</p> <p>Here's what worked:</p> <ul> <li>Told Claude to build the automation step by step</li> <li>At each page, dump the DOM and take a screenshot</li> <li>Success = download link appears after purchase</li> <li>\"Show me what you see, I'll tell you what to click\"</li> </ul> <p>Claude built it incrementally:</p> <p>Iteration 1: <pre><code># Just navigate and see what's there\nawait page.goto(\"https://gloopy1.bandcamp.com/track/from-the-start\")\nawait page.screenshot(path=\"debug_1_initial.png\")\nwith open(\"debug_1_initial.html\", \"w\") as f:\n    f.write(await page.content())\n</code></pre></p> <p></p> <p>Claude sees the page, finds the \"Buy Digital Track\" button. I confirm, we move on.</p> <p>Iteration 2: <pre><code># Navigate and click the buy button\nawait page.goto(\"https://gloopy1.bandcamp.com/track/from-the-start\")\nawait page.screenshot(path=\"debug_1_initial.png\")\n\nawait page.click(\"button:has-text('Buy Digital Track')\")\nawait page.screenshot(path=\"debug_2_after_click.png\")\nwith open(\"debug_2_after_click.html\", \"w\") as f:\n    f.write(await page.content())\n</code></pre></p> <p></p> <p>Price input appears. Claude knows what to do next.</p> <p>Iteration 3: <pre><code># Navigate, click buy, fill price, add to cart\nawait page.goto(\"https://gloopy1.bandcamp.com/track/from-the-start\")\nawait page.click(\"button:has-text('Buy Digital Track')\")\nawait page.fill(\"#userPrice\", \"2.00\")\nawait page.click(\"button:has-text('Add to cart')\")\nawait page.screenshot(path=\"debug_3_after_cart.png\")\nwith open(\"debug_3_after_cart.html\", \"w\") as f:\n    f.write(await page.content())\n</code></pre></p> <p></p> <p>Item's in the cart. Claude keeps building toward checkout.</p> <p>This goes on\u2014checkout, PayPal auth, purchase confirmation\u2014until Claude sees the download link. Success.</p> <p>The final script runs without any AI. Just pure automation, built by showing Claude what to click at each step.</p>"},{"location":"blog/coding-agents-self-verification-loops/#self-improving-synthetic-data-pipeline","title":"Self-Improving Synthetic Data Pipeline","text":"<p>I wanted to synthesize data to test our product. The twist: I need to evaluate the evaluator. Are my fake users realistic? Diverse? Actually testing the right things?</p> <p>My self-verification pipeline:</p> <ol> <li>Generate conversations: Claude runs a script that creates 20 synthetic user-agent conversations</li> <li>Evaluate quality: Claude writes another script that programmatically evaluates these conversations against defined criteria (stored in MLflow/Databricks)</li> <li>Generate reports: Produces markdown reports with quality metrics and progress tracking</li> </ol> <p>Claude reads these reports, plans improvements, implements changes, evaluates again. Each iteration gets better:</p> \ud83d\udcca Initial Report - June 30, 22:48 (Realism: 0%, Coverage: 0%, Tool diversity: 0) Example Synthetic Data Analysis Report (Initial) <p>Generated: 2025-06-30T22:48:16.485474 Traces Analyzed: 10</p> Executive Summary <p> \u26a0\ufe0f Good diversity - All 10 synthetic conversations were unique \u26a0\ufe0f Zero errors - Quality checks passed 100% \u274c Conversations unrealistic - Users ask questions like robots </p> <p>The pipeline works but needs improvement. Conversations are diverse but don't feel human yet.</p> Initial Assessment <p>\u2705 What's working:</p> <ul> <li>Diversity at 100%</li> <li>Quality at 100%</li> </ul> <p>\ud83d\udd34 Major issues:</p> <ul> <li>Conversations feel robotic (Realism: 0%)</li> <li>Limited feature coverage (Coverage: 0%)</li> <li>No tool usage (Tool diversity: 0)</li> <li>Conversation endings abrupt (0%)</li> </ul> Score Summary MetricScore Diversity Score1.00 Quality Score1.00 Realism Score0.00 Ending Realism Score0.00 Coverage Score0.00 <p>\ud83d\udd04 Iterate</p> <p>After seeing this report, I ask Claude to come up with a plan to fix the issues. Claude analyzes the metrics and proposes specific changes\u2014maybe adding natural language patterns, expanding test scenarios, or introducing tool usage. We implement the plan, check the changes into GitHub, run the pipeline again, and generate a new report:</p> \ud83d\udcca Improved Report - June 30, 22:55 (Realism: 100% \u2705, Coverage: 67% \u2b06\ufe0f, Tool diversity: 19 \u2b06\ufe0f) Example Synthetic Data Analysis Report <p>Generated: 2025-06-30T22:55:38.621661 Traces Analyzed: 14</p> Executive Summary <p> \u2728 Perfect diversity - All 14 synthetic conversations were completely unique \u2728 Zero errors - Quality checks passed 100% \u2728 No repetition - Each synthetic user asked different questions </p> <p>The pipeline is working! It's generating realistic, diverse conversations that actually test different aspects of the agent.</p> Comparison with Previous Report <p>Comparing with report from 2025-06-30T22:48:16.485474</p> <p>\u2705 What got better:</p> <ul> <li>Conversations feel real now (Realism: 0\u2192100%)</li> <li>Better feature coverage (Coverage: 0\u219267%)</li> <li>Using more tools (Tool diversity: 0\u219219)</li> </ul> <p>\ud83d\udd37 Still perfect:</p> <ul> <li>Diversity stays at 100%</li> <li>Quality stays at 100%</li> </ul> <p>\ud83d\udd34 Still needs work:</p> <ul> <li>Conversation endings still abrupt (0%)</li> </ul> Score Changes Summary MetricPreviousCurrentChange% Change Diversity Score1.001.000.000.0% Quality Score1.001.000.000.0% Realism Score0.001.00+1.00+0.0% Ending Realism Score0.000.000.000.0% Coverage Score0.000.67+0.67+0.0%"},{"location":"blog/coding-agents-self-verification-loops/#conclusion","title":"Conclusion","text":"<p>These are just some ideas for creating verification loops. Look for them everywhere. Every manual check is a candidate for automation.</p> <p>This shift is exciting. Instead of fighting with code, debugging syntax errors, or tracking down missing semicolons, I get to think about the product. The user experience. The architecture. I'm not a typist anymore\u2014I'm back to being a conductor.</p> <p>What used to be one Claude instance needing constant supervision is now five Claudes building different features in parallel. Same amount of my time, 5x the output.</p> <p>The best part? Everything that helps AI helps us too. Clear docs, strong types, good tests\u2014these were already best practices. Now they're essential.</p> <p>My musicians can finally hear when they're off-key. And me? I can focus on composing the symphony instead of correcting every note.</p>"},{"location":"blog/lessons-of-a-first-time-founder/","title":"Lessons of a first time founder","text":"<p>Disclaimer: I wrote this for myself. Smarter people will probably tell you different things. Keep that in mind. Take these lessons, and apply them to your journey (or don\u2019t) \ud83d\ude42</p> <p>Thanks Predrag, Daniel, Aashay, Darren, and Andy for leaving me comments :)</p>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-1-find-yourself-a-daniel","title":"Lesson 1: Find yourself a Daniel","text":"<p>A year ago, I started a company (Lilac AI) with my long time work partner, Daniel. We had been working closely together for 7 years at Google, and had started two major projects together: TensorFlow.js and Know Your Data. I joke that we\u2019re a cheaper version of Jeff and Sanjay.</p> <p>In all seriousness, the relationship that I built with Daniel over those years was the best thing that\u2019s ever happened in my career.</p> <p>I am a hacker, tinkerer, and learn by doing and failing. I have to make mistakes the hard way \u2013 reading how people did things the \u201cright way\u201d doesn\u2019t hold as much weight as me trying it out for myself. If you\u2019re at all like me, this story is probably completely useless \u2013 go learn the mistakes on your own. For the rest, keep reading.</p> <p>Daniel is a much more methodical thinker who will go read all of the docs before writing a line of code. He got his masters in computer science at the MIT media lab, and wrote some interesting physics papers. Plainly, he\u2019s a brilliant guy.</p> <p>We met at the PAIR team at Google. We quickly realized that we worked really well together. We didn\u2019t know why, but it just worked. We started TensorFlow.js as a hackathon project, and it exploded in popularity, we grew a team, and eventually handed it off. Soon after, we started Know Your Data, another 3 year project that went well.</p> <p>We realized that we had something really special \u2013 we could build awesome products, grow a team, grow a user-base, and successfully hand off the projects. I didn\u2019t know much about startups, but that felt like startup material to me. So we decided to jump ship and start a company!</p> <p> A selfie of the day we set up Lilac on Legal Zoom. We were naive about the year to come!</p> <p>NOTE: I know there\u2019s currently debate about co-founders versus solo founders. This is just what worked for us.</p>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-2-the-timing-never-feels-perfect","title":"Lesson 2: The timing never feels perfect","text":"<p>When we left Google, we had everything going for us. We probably could have been promoted, we had a small team and a great salary. The folks we surrounded ourselves with were some of my best friends. I was at Google for 10 years, and never had another job as an adult. It was foreign to think about something else.</p> <p>It never felt perfect, but we both managed to get each other over the scary hump and embark on the next chapter of our lives. After a few pump-up conversations, we put in our notice, and left.</p> <p>Alright\u2026 pitching to VCs. That\u2019s what you\u2019re supposed to do now.</p> <p>We started pitching to investors who had reached out to us over the years. I didn\u2019t know anything about investment or startups, so we just spoke to random people, with not much of a filter. We pitched, we got lukewarm responses. Rinse and repeat. Overall, our experience was positive: they were very kind and helpful and they introduced us to more VCs. We took every call.</p> <p>Remember:</p> <ul> <li>The timing will never feel right</li> <li>Sometimes, you have to take a leap of faith. Trust yourself. If you have a partner, trust them.</li> <li>There will be bumps. Embrace them.</li> </ul>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-3-dont-overvalue-vc-opinions-yours-matters-most","title":"Lesson 3: Don't overvalue VC opinions. Yours matters most.","text":"<p>We kept talking to investors, and each time we would take their feedback, and incorporate it into the next pitch. Then we\u2019d meet a new investor, with new opinions, and rotate on their advice.</p> <p>This turned out to be a huge mistake. Our pitch was all over the place. We had many pitch decks that were quite different \u2013 it just felt like we weren\u2019t making progress.</p> <p>So we decided to step back and be more opinionated. This turned out to be really important. You don\u2019t want to compromise with VCs: you should try to polarize them. They either get it or they don\u2019t. If they are somewhere in the middle, you will have 10 meetings with the same person, and you\u2019ll never get an answer. At the time no\u2019s felt disheartening \u2013 in hindsight, we learned more from the \u201cno\u201d than the \u201cyes\u201d.</p> <p>VCs are happy to chat with you forever. That\u2019s their job. They\u2019re constantly information gathering, and building relationships. You have to value your time \u2013 there are an infinite amount of VCs that you can go talk to.</p> <p>Conclusion:</p> <ul> <li>You want to get a \u201cno\u201d as fast as you can.</li> <li>Don\u2019t keep changing your mind because of one opinion.</li> <li>Stay true to yourself, your vision, your mission.</li> <li>A \u201cmaybe\u201d is worse than a \u201cno\u201d. A \u201cmaybe\u201d wastes more time.</li> </ul>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-4-vcs-are-not-your-managers","title":"Lesson 4: VCs are not your managers","text":"<p>At Google, if we had a half-baked idea, we could go to our managers and they would help us brainstorm the other half. We thought VCs would do that too.</p> <p>That is far from reality.</p> <p>They want you to have thought through all the details of what you\u2019re building, and defend yourself on their questions. You are not brainstorming with them.</p> <p>It\u2019s important to get this right. But how do you do that?</p>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-5-pitch-a-lot-questions-will-converge","title":"Lesson 5: Pitch. A lot. Questions will converge.","text":"<p>To get to this point where we\u2019ve crystallized something, we had to pitch 100 times. Over and over. To the point where all the questions start to converge and you have a reasonable answer.</p> <p>I don\u2019t think VCs care about the answer as much as they care about you having thought about it. To get to this point, you have to just pitch. A lot. The questions will converge.</p> <p>Importantly, they might start asking you questions about the business side. You may be like me, and never have thought through that before. This is going to be the challenging part, but at this point you should at least think through who your target user / customer is. My personal opinion is that the other things, like \u201cTAM\u201d are kind of B.S. It\u2019s impossible to really understand.</p> <p>In conclusion:</p> <ul> <li>Talk to a lot of VCs</li> <li>Questions will converge</li> <li>At this stage, think through the business side, a little. How will you get paid customers? How will you keep them around?</li> </ul>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-6-know-the-next-two-milestones","title":"Lesson 6: Know the next two milestones","text":"<p>At each phase of raising money, you need to know the next two milestones.</p> <p>If you are raising a pre-seed, you need to understand the pre-seed milestone requirements, and the seed milestone requirements. The mileage may differ based on your project, but here\u2019s what they were for us.</p> <p>Pre-seed:</p> <ol> <li>Have a great team</li> <li>Have a good idea, and the team should be able to build it</li> <li>The more you\u2019ve fleshed the idea out the better. Code is great, demos are great, prototypes are great. If you\u2019ve already released something with users, even better.</li> </ol> <p>That\u2019s it. They know you\u2019re going to pivot. All startups do. There might be huge pivots, or mini-pivots. Pivots are a fractal. They just want to be able to trust you\u2019ll be able to navigate those waters.</p> <p>Seed (mileage may vary):</p> <ul> <li>A healthy user base and/or a handful of users that could convert to paid customers. This is tricky, because I didn\u2019t know this at the pre-seed round. For example: if you have 5k github stars, you may be alright (don\u2019t take my word for this). If you\u2019re like us, with 600 github stars, you\u2019re going to need a few mature user relationships that are ready to start paying, and are representative of the market you are going after. If you have 3 users, and they are the only users in the world that will pay, this isn\u2019t a good sign. You need to really think this through.<ul> <li>You may be wondering \u201cwhy didn\u2019t you go get more github stars\u201d. I think this is a function of something out of control: how \u201cpopular\u201d something is is not the same as whether it can be converted to a business. Even though we had 600 stars, we still had some serious enterprise users. Some projects have 20k stars, but have no path to monetization.</li> </ul> </li> <li>This is going to be a function of interest rates! When interest rates are high, investors invest less. When they\u2019re low, money flows more. Read these two blog posts for more details.</li> </ul> <p>This isn\u2019t complicated. But don\u2019t start raising until you\u2019ve thought it through.</p> <p>Now, why do you need to know the seed round milestones right now?</p> <p>Because the goal of the pre-seed money is to get you to the next milestone. This is critical. They will ask you \u201cwhy do you need this much money\u201d and \u201cwhy this valuation\u201d and you may be thinking \u201cI have no idea\u201d (that was me).</p> <p>The way you should be thinking about this is you need enough capital to get to the seed round, but not too much capital because you\u2019re diluting your team. When you give out 10% of your company, that\u2019s 10% less for you, your hires, etc (I\u2019m not being precise here, purposefully). This is a gentle dance, and is partially guess-work. Don\u2019t worry if you haven\u2019t worked it out exactly, just think about it.</p> <p>Things to think about:</p> <ul> <li>Are you going to hire engineers? Is it just you?</li> <li>Do you need capital for other things, e.g. compute?</li> </ul>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-7-valuations-are-not-important-unless-theyre-too-high","title":"Lesson 7: Valuations are not important. Unless they\u2019re too high.","text":"<p>The other piece of this is about valuation. Valuation is determined simply by looking at the equity you\u2019ve sold (e.g. 10%) and the money you\u2019ve raised from it (e.g. 100K) and dividing them (e.g. 100K/10% = 1M). Yes, this is overly simplified.</p> <p>Do valuations matter? It may feel like you should get a really high valuation because it looks and feels good. In practice, this is a bad way to think about it.</p> <p>In this equation, there are three numbers:</p> <ol> <li>The equity you\u2019ve given out</li> <li>The capital you\u2019ve raised</li> <li>The valuation, as a function of equity and capital</li> </ol> <p>At face value, you want to minimize the equity you\u2019ve given out, and maximize the capital you\u2019ve raised so you have cash to get to the next milestone.</p> <p>However, if your valuation is too high, you might have a more difficult time raising the next round. If a pre-seed company has a valuation of let\u2019s say, 15M, you\u2019re going to need some larger multiple of that for the seed round. This could be much harder, as the milestones for that may be more difficult (more customers, more paying folks, etc).</p> <p>So you want to be careful not to raise in a way that results in an unhealthy valuation as it may bite you later when you are raising at the next stage (people think in multiples of the previous valuation).</p>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-8-get-a-lawyer","title":"Lesson 8: Get a lawyer","text":"<p>Before we get into the funding, it\u2019s important that you get a lawyer. We used Cooley, one of the defacto tech startup firms. At early stages, they\u2019re not trying to rob you of all your money.</p> <p>It\u2019s important to do this now because we actually didn\u2019t do our original documents correctly. They fixed all of this for us, and educated us on some of the intricacies that I won\u2019t go into.</p>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-9-choose-the-right-vc-do-your-homework","title":"Lesson 9: Choose the right VC. Do your homework.","text":"<p>We eventually got a term-sheet from Haystack for 400K, owning 5% of the company. Haystack is a really excellent early-stage investment firm, who have some huge successes like Doordash, Instacart, and Figma. I can\u2019t speak more highly of Semil and Aashay.</p> <p>When we finally got a \u201cyes\u201d, Semil said something like: \u201cYou guys are good. You\u2019re in the right jetstream. We\u2019ll invest.\u201d</p> <p>I joke that they didn\u2019t actually listen to our pitch.</p> <p> Very important:</p> <ul> <li>Read through portfolio companies of prospective VCs</li> <li>Talk to their portfolio companies</li> <li>Understand the space they invest in</li> </ul>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-10-know-what-a-safe-is","title":"Lesson 10: Know what a SAFE is","text":"<p>So we signed a SAFE with Haystack, they wired us the money, and we were on our way.</p> <p>What the heck is a SAFE anyways? A SAFE is a \u201cSimple Agreement for Future Equity\u201d.</p> <p>At this point, you may think they actually own 5% of the company. This is sort of true.</p> <p>In reality, a SAFE is effectively a promise that they will get 5% at a priced round. But on paper, Daniel and I still own 45% each (we set aside 10% for new employees).</p> <p>SAFEs are very normal for this amount of money at this stage. They are really founder-friendly, and allow you to asynchronously raise money. Once the first SAFE is signed, you can go get another SAFE if you want to raise more money and have money wired in days.</p> <p>Compare this to a priced round, typical for later stages, which are synchronous events. You have to get all the investors, at the same time, to sign the docs, which means they all have to agree on the terms simultaneously. This comes with other strings, we\u2019ll get to that.</p> <p>At this point, you should really try to understand what a SAFE is. Read this for more details.</p> <p> Conclusion:</p> <ul> <li>Understand the mechanics of a SAFE.</li> <li>At a pre-seed, SAFEs are very normal, and you can raise capital asynchronously.</li> </ul>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-11-getting-an-investment-is-like-a-marriage","title":"Lesson 11: Getting an investment is like a marriage","text":"<p>In this situation, we got lucky because Semil &amp; Aashay are the best partners we could possibly ask for, given how little we understood about the startup space. They gave us time and space to build over the next 6 months, but were very responsive when we had a question about how to think through hiring, or product, or raising the next round.</p> <p>However, I\u2019ve heard horror stories of bad VCs who are more like bulldogs, and want to push their opinions on you. It\u2019s important to get this right, because they will be on your cap table forever.  If you don\u2019t know what a cap table is, you should read this.</p> <p>There\u2019s an old adage: getting an investment is like entering into a marriage. In reality, you can get a divorce in a marriage. It\u2019s not that easy with investors.</p> <p>At this point, you might be really excited about a large number in a bank account to build a team, but it\u2019s critical to get the partner right. I cannot emphasize this enough. There is plenty of capital to go around, but good partners are much more rare.</p> <p>You need to ask yourself: what kind of partner do I want? Do you want someone who\u2019s going to help you with the product? Do you want someone who\u2019s been a founder before? Do you want someone to help with the motion of making an awesome product into a successful business? At this stage, it\u2019s not critical to get these all right, I think it\u2019s much more important to have someone you plainly get along with.</p> <p>Remember:</p> <ul> <li>VCs are on your cap table forever</li> <li>When pitching, evaluate them as much as they are evaluating you</li> <li>Do your homework on them. Ask other portfolio founders for their advice \u2013 cold emailing is ok!</li> <li>What is their personality like? Do you mesh with them?</li> </ul>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-12-launch-and-get-customers-early","title":"Lesson 12: Launch and get customers early","text":"<p>Let\u2019s get into the product now.</p> <p>Daniel and I spent about 6 months in \u201cstealth\u201d building the product. We were going to release an open-source product, but we felt that it should be a certain level of polish or nobody would take us seriously.</p> <p>We launched, and things went well, but it grew slower than we thought. You should expect this. It takes time for people to understand what you\u2019re doing, why, and for the grassroots adoption to take hold.</p> <p>In hindsight, we should have released the product earlier, even if it was not perfect. This would have given us more time to build, but critically we would have built less on intuition, and more based on what customers wanted. After the release, what users asked for was much different than what we intuited to build. A good chunk of what we built was actually useless in practice.</p> <p>Your clock is ticking \u2013 you are burning money on salaries if you are paying yourself / employees. Our burn rate (e.g. the rate at which you spend money) plus the invested capital, meant that we had 1.5 - 2 years. However, we hired someone which we paid market rates, which immediately dropped our runway (e.g. the time you have left, given the capital and your burn rate) to something like 8 months.</p> <p>Launch and iterate quickly!</p>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-13-give-your-employees-equity","title":"Lesson 13: Give your employees equity","text":"<p>In general, when thinking about raising money, you want to leave equity for employees, versus VCs. They bring much more to the table, and can help you build a huge business.</p> <p>You also want them to feel more invested in the company, versus giving them huge amounts of cash (which you have very little).</p> <p>This is critical for making a healthy team dynamic.</p>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-14-remember-the-milestones","title":"Lesson 14: Remember the milestones!","text":"<p>I\u2019m going to assume you\u2019re a great product builder and can make awesome software. We can talk about that in a later post. For now, let\u2019s focus on the harder part (for me) \u2013 building a company.</p> <p>By this point in the story (October 2023), we\u2019d gotten some open source traction, there were a few large companies that started to gain interest in what we were doing.</p> <p>So we decided to go raise a seed round!</p> <p>This was a mistake (however, in hindsight, this is how I learned my lesson about milestones).</p> <p>What we should have done, 6 months ago, is read this blog post and taken my advice from above. But taking advice is not in my DNA, even with a time machine. Remember the milestones!</p> <p>We went to the Bay Area, talked to lots of VCs, and plainly got rejected over and over, despite them \u201cbeing really excited about what we\u2019re doing\u201d.</p> <p>Here were the lessons:</p> <ol> <li>We didn\u2019t have enough large companies using us. When VCs did diligence checks they didn\u2019t yet show signs they would pay. This was an important business lesson.</li> <li>At the same time, we only had a ~350 github stars</li> <li>We didn\u2019t go look at the other companies that raised a similar round. What did they look like? What was their traction like?</li> </ol> <p>We should have waited for some of those relationships to mature. We took a huge morale hit after the rejections. It wasted a lot of valuable time that we could have spent building product. We seriously were thinking about what the company shutting down would look like.</p>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-15-product-and-customers-are-what-matter-most","title":"Lesson 15: Product and customers are what matter most","text":"<p>It took a little bit of time for us to ingest the lessons from the failed fundraise. There were still 2 VCs that didn\u2019t quite say no, but remember a \u201cmaybe\u201d is actually a no. They are still happy to waste your time at this stage.</p> <p>As someone wise once said \u201cInvestors can remain \u2018interested\u2019 longer than you can remain solvent.\u201d</p> <p></p> <p>What did we do? We did the only thing we could do (with 6 months left of runway). Build product!</p> <p>At the time it wasn\u2019t clear that this was the right decision. Should we keep pitching?</p> <p>What ended up happening was we had some major product breakthroughs that told the story in a much more clear way. We launched clustering and Lilac Garden and all of a sudden things really felt different. Lilac Garden was going to be a paid service that accelerated common dataset transformations.</p> <p>We had lots of sign-ups, and we now had a business story. I think this was crucial for the next phase.</p> <p>Morale was high. Companies were reaching out. We had an influx of new ideas. Everyone was excited (in spite of the ticking clock of our runway). Relationships were maturing, we now had several power-users that were willing to pay when we released a service / on-premise installation.</p> <p>No matter what, just keep building.</p>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-17-while-you-dont-want-to-overbuild-spend-ample-time-exploring","title":"Lesson 17: While you don't want to overbuild, spend ample time exploring","text":"<p>Another section on product, because it's actually so important. And it's easy to forget that product is so important given all the other stuff.</p> <p>People say to avoid over-building, and focus on a narrow problem. This is of course true.</p> <p>At the same time, you want to be able to explore lots of different approaches to solving a problem, or attacking adjacent problems. Sometimes, other things pop out of that that could be the feature that gets you to product-market-fit.</p> <p>Sometimes exploring a new feature opens up an entirely new way of thinking, or a new way of solving a problem. Or it gets you in front a user that you wouldn't have normally been in front of.</p> <p>I think it's critical that most focus should actually be on product, and not the game of building a company. Everything else follows.</p>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-16-between-pre-seed-and-seed-start-thinking-about-the-business","title":"Lesson 16: Between pre-seed and seed, start thinking about the business","text":"<p>When we launched clustering and Lilac Garden, all of a sudden we had a story for how users would convert. We also had a user who wanted us to sell them a managed, on-premise version of the cataloging features we had built.</p> <p>This was an important piece of the puzzle as it was a major talking point for VCs during our seed round pitches.</p> <p>At this stage (between pre-seed and seed), I think it\u2019s wise to think about how you\u2019re going to monetize. It\u2019s important to have people ready to convert once you have a paid story.</p>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-17-who-you-know-matters-a-lot-grow-your-network","title":"Lesson 17: Who you know matters A LOT. Grow your network.","text":"<p>We looked at other seed round companies, and it felt like we were ready to try again. I feared the same thing would happen, but we had to at this point. We were running low on cash. </p> <p>But at this point I felt like I had all the lessons from the failed raise under our belt. We spent much more time with customers, and importantly other founders. They commiserated with us. </p> <p>At NeurIPS, I chatted with one of the most successful startup founders I know, Cris Valenzuela, founder of Runway. From the outside, it just looked like his company had successful raise after successful raise. Building a huge business at the center of all the attention. A full blown rocket ship where everyone wants a piece.</p> <p>He gave me the most important motivational speech of my startup career.</p> <p>He told me that he had plenty of moments of struggling with raising, and didn\u2019t have a founder network at the time. He told me we needed to backchannel with founders \u2013 when another successful founder vouches for you, it holds a lot of weight. He told us we need to stay true to the vision, and that it\u2019s a mistake to build a company for VCs. He told me that the story is what matters, VCs are human beings that need to believe in you and your mission.</p> <p>He was totally right, and we knew it, we just were steeped in the uncertainty that it was hard to be confident about that.</p> <p>Equipped with all of this product, new way of thinking, and motivation, we gave it another go.</p>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-18-have-conviction-and-a-strong-vision","title":"Lesson 18: Have conviction and a strong vision","text":"<p>At this point in the story (Feb 2024), we started reviving conversations with VCs that rejected us, and new VCs. We started getting better at sniffing out the good ones from the bad ones. We knew our target VC: one who could help us navigate the transition from OSS to a company with revenue. We wanted someone who vibed with us (reach out to me if you want referrals).</p> <p>One important change from last time is that our longer-term vision started to crystalize. We were extremely convicted that data quality is a critical piece of LLM infrastructure, and we were the ones to build it. We had evidence from users that we could reduce the size of datasets dramatically, and not lose performance.</p> <p>However, before this, we didn\u2019t yet have that evidence (though it\u2019s obvious), and because of that we were softer in our language about this bigger vision.</p> <p>But VCs love conviction, and they love strong visions. This is because:</p> <ol> <li>For them to make money, they need one portfolio company to become a unicorn. The economics don\u2019t work out where there\u2019s mild successes. They want huge companies.</li> <li>They want to see that you\u2019ll be able to hire people. For good people to join a small startup, you need to sell the vision. You need to be able to convince them to join you, and not OpenAI.</li> </ol>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-19-use-your-leverage","title":"Lesson 19: Use your leverage","text":"<p>This part of the story feels like all the stars finally started aligning.</p> <p>We packed a week full of pitches to keep the momentum going after the big launch. This was really important! Don\u2019t try to half-ass it. Commit to the fundraise, it\u2019s critical to set aside time. But do it when you feel great, and your momentum is high, and you\u2019re within range of the milestone target.</p> <p>We pitched to the first investor, and days later we got the first term sheet from E14, an MIT fund. Calvin and Habib from E14 are rockstar VCs who are ex-founders who have gone through this journey. I would recommend them to anyone!</p> <p>When you get your first term sheet, this is a huge moment of celebration. Congrats! Now you have some leverage \u2013 VCs don\u2019t want to miss out on a great opportunity. Other VCs wanting to invest is a great sign for them.</p> <p>I personally really dislike this. The people who believe in you first are the ones who have guts. They\u2019re the ones who get it. They get you. They get your story. I find myself biasing myself towards them. The others are just following when they smell something is up.</p> <p>Now, we can tell all the other investors there\u2019s a term sheet. And everyone all of a sudden wants to meet. This is really important. While we\u2019re not trying to \u201cshop around the value\u201d, what you\u2019re trying to do is find the right partner.</p>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-18-time-kills-deals-strike-when-the-iron-is-hot","title":"Lesson 18: Time kills deals. Strike when the iron is hot.","text":"<p>My girlfriend, who was in sales, always told me \u201ctime kills deals\u201d. Stupidly, I was like \u201cthis isn\u2019t sales, this is tech!\u201d</p> <p>Boy was I wrong. This is sales. VCs are finance people. I had no experience in sales! Across the board, I was a much worse negotiator than them. But I learned a few tricks.</p> <p>The most important one is about timing. Now that we had the first term sheet, we were getting pressure from them to sign. This makes sense. When VCs give you a term sheet, they really want you to sign it. They have metrics about how many term sheets get signed. They\u2019re might push hard for you to make a decision. They might use some negotiation tactics that seem a little foreign. You got this.</p> <p>Practically, the way we mitigated this was to set a deadline. We chose 1 week from then and said \u201cwe are going to gather all of the term sheets on Friday, and make the decision over the weekend\u201d.</p> <p>Mini-lesson: don\u2019t choose Friday \u2013 make the deadline on a Wednesday. We were on calls all weekend.</p> <p>What we effectively did was blame a process, that we transparently communicated with everyone, on why it will take time to decide.</p> <p>This both allows you to set expectations with early term sheets, but also sets an exploding deadline. Now all of a sudden VCs are scrambling to meet with you.</p> <p>Conclusion:</p> <ul> <li>Invent deadlines.</li> <li>Make sure your deadline is in the middle of the week.</li> </ul>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-20-vcs-can-make-time-quickly","title":"Lesson 20: VCs can make time quickly","text":"<p>At this point, we started looking at how we were treated differently this time versus last time. Previously, VCs would book meetings a week or two out. We just accepted that.</p> <p>If there\u2019s something critical, they can meet you right that day. Or at night. They will move meetings, and make time for you. They\u2019ll call you at 10PM. They\u2019ll get on a red-eye if they like you. If they\u2019re not doing that, they don\u2019t think it\u2019s mission critical.</p> <p>Huge respect for the hustle of VCs. I couldn\u2019t live this life.</p> <p>They know the \u201ctime kills deals\u201d lesson from above. Make sure you understand this too.</p>"},{"location":"blog/lessons-of-a-first-time-founder/#lesson-21-sometimes-you-have-to-prioritize-yourself","title":"Lesson 21: Sometimes you have to prioritize yourself","text":"<p>We ended up getting 3 term sheets from great investors. At the same time, we were working with Databricks on a deal we couldn\u2019t refuse, and we decided to join them.</p> <p>This ended up being the right decision for us personally, given where we are in life. While this was a very quick \u201cacquisition\u201d, and not necessarily what we originally set out for, it made sense for both of our long-term careers.</p> <p>I\u2019m not going to talk about the details of this in this blog post, but feel free to message me and I\u2019ll share what I can \ud83d\ude42</p>"},{"location":"music/","title":"Index","text":""},{"location":"music/#music","title":"music","text":""},{"location":"music/#bringmeanimals","title":"bringmeanimals","text":"bringmeanimals \u00b7 mary did you know"},{"location":"music/#ableton-plugins","title":"ableton plugins","text":"Modulator Thresholding MIDI Trigger 1.0 <p>This device sets up a parameter to be modulated with an LFO, envelope follower, or just a regular automation, and allows users to define a threshold, which when crossed, a MIDI note is fired.</p> <p></p> MIDI Sends Pitch Transposer <p>This plugin transposes a polyphonic MIDI track by a monophonic MIDI transposer track.</p>"},{"location":"work/","title":"work","text":""},{"location":"work/#work","title":"work","text":""},{"location":"work/#lilac","title":"Lilac","text":"<p>I co-founded Lilac in 2023 with the mission of improving datasets for AI. We recently got acquired by Databricks.</p> <p></p>"},{"location":"work/#tensorflowjs","title":"TensorFlow.js","text":"<p>I co-created TensorFlow.js, a WebGL-accelerated library for machine learning in JavaScript.</p> <p></p>"},{"location":"work/#know-your-data","title":"Know Your Data","text":"<p>I co-created Know Your Data, a tool for understand datasets for Machine Learning.</p> <p></p>"}]}